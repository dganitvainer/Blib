package logIn;

import client.ClientController;
import java.net.ConnectException;
import java.net.InetAddress;
import java.net.UnknownHostException;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import javafx.scene.control.Label;

/**
 * Controls the connection screen interface of the application. Manages user
 * interactions and handles connection initialization for client-server
 * communication.
 *
 */
public class ConnectionScreenController {

	/**
	 * Button that triggers the connection attempt to the server. Controlled by FXML
	 * injection.
	 */
	@FXML
	private Button btnConnect;
	/**
	 * Text field for entering the server IP address. Accepts IPv4 address format.
	 * Controlled by FXML injection.
	 */
	@FXML
	private TextField ipAddressT;
	/**
	 * Label that displays error messages related to IP address validation. Shows
	 * feedback when connection or validation fails. Controlled by FXML injection.
	 */
	@FXML
	private Label errorIPLabel;

	/**
	 * Controller instance that manages client-side operations. Handles
	 * communication between the UI and server.
	 */
	private ClientController clientController;

	/**
	 * Starts the JavaFX application by setting up the primary stage with the
	 * connection screen.
	 * 
	 * @param primaryStage the primary stage for this application, onto which the
	 *                     application scene can be set
	 * @throws Exception if the FXML file cannot be loaded
	 */
	public void start(Stage primaryStage) throws Exception {
		FXMLLoader loader = new FXMLLoader(getClass().getResource("/logIn/ConnectionScreen.fxml"));
		Parent root = loader.load();
		Scene scene = new Scene(root);
		primaryStage.setTitle("BLib");
		primaryStage.setScene(scene);
		primaryStage.show();
	}

	/**
	 * Gets the IP address from the input field.
	 * 
	 * @return the IP address entered by the user
	 */
	private String getIpAddress() {
		return ipAddressT.getText();
	}

	/**
	 * Handles the action event for the connect button. Initiates a connection to
	 * the server with the provided IP address and port. If the connection is
	 * successful, it transitions to the login screen. If the connection fails, an
	 * error message is displayed.
	 * 
	 * @param event The action event generated by clicking the connect button.
	 */
	@FXML
	void getBtnConnect(ActionEvent event) {

		String ipAddress = getIpAddress();

		// Check if the IP address field is empty
		if (ipAddress == null || ipAddress.trim().isEmpty()) {
			errorIPLabel.setVisible(true);
			errorIPLabel.setText("IP address cannot be empty. Please enter a valid IP.");
			System.err.println("No IP address entered.");
			return; // Stop execution and do not proceed
		}

		// Validate the format of the IP address (optional)
		if (!isValidIpAddress(ipAddress)) {
			errorIPLabel.setVisible(true);
			errorIPLabel.setText("Invalid IP address format. Please enter a valid IP.");
			System.err.println("Invalid IP address entered: " + ipAddress);
			return; // Stop execution and do not proceed
		}
		try {
			clientController = new ClientController(getIpAddress(), 5555);
			clientController.display("Connected");

			// Move to the login screen only if the connection is successful
			((Node) event.getSource()).getScene().getWindow().hide();
			MainMenuController newScreen = new MainMenuController();
			newScreen.start(new Stage());

		} catch (ConnectException e) {
			errorIPLabel.setVisible(true);
			errorIPLabel.setText("Unable to connect to the server. Check the IP address.");
			System.out.println("Unable to connect to the IP address");
		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	/**
	* Validates if a given string represents a valid IPv4 address.
	* Performs validation by attempting to create an InetAddress and verifying
	* the address format contains dots (typical of IPv4).
	*
	* @param ipAddress The IP address string to validate
	* @return true if the string is a valid IPv4 address, false otherwise
	* 
	* @see InetAddress
	*/
	public boolean isValidIpAddress(String ipAddress) {
		try {
			InetAddress inet = InetAddress.getByName(ipAddress);
			// Check if it's an IPv4 address
			return inet.getHostAddress().equals(ipAddress) && ipAddress.contains(".");
		} catch (UnknownHostException e) {
			return false; // If it throws an exception, it's not valid
		}
	}

}
